#!/bin/bash
# Wonder Shaper
# please read the README before filling out these values 
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.
DOWNLINK=250
UPLINK=250

DDEV=br1
UDEV=br0

EC2="107.20.0.0/14 50.16.0.0/14 54.230.0.0/15 174.129.0.0/16"

DOWNLINK2=$[$DOWNLINK*8/10]
UPLINK2=$[$UPLINK*9/10]

TC=/sbin/tc

if [ "$1" = "status" ]
then
	echo "Uplink ($UDEV):"
	$TC -s qdisc ls dev $UDEV
	$TC -s class ls dev $UDEV
	echo
	echo "Downlink ($DDEV):"
	$TC -s qdisc ls dev $DDEV
	$TC -s class ls dev $DDEV
	exit
fi

LOCKFILE=/var/run/wshaper.pid
if [ -r "$LOCKFILE" ]; then
	OTHERPID=`cat $LOCKFILE`
	if [ -n "$OTHERPID" -a -d "/proc/$OTHERPID" ]; then
		echo "Another wshaper is already running with pid $OTHERPID"
		exit 2
	fi

	echo "Removing stale lockfile $LOCKFILE for $OTHERPID"
	rm $LOCKFILE
fi
echo $$ > $LOCKFILE

# clean existing down- and uplink qdiscs, hide errors
$TC qdisc del dev $UDEV root    2> /dev/null > /dev/null
$TC qdisc del dev $UDEV ingress 2> /dev/null > /dev/null

$TC qdisc del dev $DDEV root    2> /dev/null > /dev/null
$TC qdisc del dev $DDEV ingress 2> /dev/null > /dev/null

iptables='/sbin/iptables'

old_blocked=`mktemp /tmp/blocked.XXXXXX`
$iptables -t filter -L blocked > $old_blocked

$iptables -t nat -F blocked
$iptables -t filter -F blocked
# $iptables -t filter -F throttle

if [ "$1" = "stop" ] 
then 
	rm $LOCKFILE
	exit
fi

# blocking

echo '
SELECT ip_src, sum(bytes) as b, "uploaded"
FROM acct_v7
WHERE stamp_inserted > CONCAT(LEFT(NOW(), 10), " 00:00")
AND   stamp_inserted < CONCAT(LEFT(NOW(), 10), " 23:59")
AND   bytes < 100000000
GROUP BY ip_src
HAVING b > 1000000000;

SELECT ip_dst, sum(bytes) as b, "downloaded"
FROM acct_v7
WHERE stamp_inserted > CONCAT(LEFT(NOW(), 10), " 00:00")
AND   stamp_inserted < CONCAT(LEFT(NOW(), 10), " 23:59")
AND   bytes < 100000000
GROUP BY ip_dst
HAVING b > 1000000000;
' | mysql pmacct -u pmacct -pg,kmesnyrxtkxbse -N | while read ip bytes direction; do
	blocking="$blocking : blocking $ip for $bytes bytes $direction"
	$iptables -A blocked -s $ip -d 192.168.128.1 -p tcp \
		-m multiport --dports 53,81 -j ACCEPT
	$iptables -A blocked -s $ip -d 192.168.128.1 -p udp \
		--dport 53 -j ACCEPT
	$iptables -A blocked -s $ip -j REJECT
	$iptables -A blocked -d $ip -s 192.168.128.1 -p tcp \
		-m multiport --sports 53,81 -j ACCEPT
	$iptables -A blocked -d $ip -s 192.168.128.1 -p udp \
		--sport 53 -j ACCEPT
	$iptables -A blocked -d $ip -j REJECT
	$iptables -t nat -A blocked -s $ip -p tcp --dport 80 \
		-j DNAT --to-dest 192.168.128.1:81
done

new_blocked=`mktemp /tmp/blocked.XXXXXX`
$iptables -t filter -L blocked > $new_blocked
if ! diff -u $old_blocked $new_blocked; then
	echo "Blocking changed: $blocking"
fi

rm $old_blocked $new_blocked

###### uplink

# install root HTB, point default traffic to 1:140 (unknown):

$TC qdisc add dev $UDEV root handle 1: htb default 140

# shape everything at $UPLINK speed - this prevents huge queues in your
# DSL modem which destroy latency:

$TC class add dev $UDEV parent 1: classid 1:1 htb \
	rate ${UPLINK}kbit burst 16k \
	quantum 1500

# high prio class 1:110:

$TC class add dev $UDEV parent 1:1 classid 1:110 htb rate \
	$[${UPLINK}/2]kbit ceil ${UPLINK}kbit burst 8k \
	prio 1 quantum 1500

# bulk & default class 1:120 - gets slightly less traffic, 
# and a lower priority:

$TC class add dev $UDEV parent 1:1 classid 1:120 htb \
	rate $[${UPLINK}/4]kbit ceil $[${UPLINK}/2]kbit \
	burst 6k prio 2 quantum 1500

# backups

$TC class add dev $UDEV parent 1:1 classid 1:130 htb \
	rate 50kbit ceil $[(${UPLINK}*2)/4]kbit burst 6k prio 3 quantum 1500

# everything else

$TC class add dev $UDEV parent 1:1 classid 1:140 htb \
	rate 50kbit ceil $[${UPLINK}/2]kbit burst 6k prio 3 quantum 1500

# all get Stochastic Fairness:
$TC qdisc add dev $UDEV parent 1:110 handle 110: sfq perturb 10
$TC qdisc add dev $UDEV parent 1:120 handle 120: sfq perturb 10
$TC qdisc add dev $UDEV parent 1:130 handle 130: sfq perturb 10
$TC qdisc add dev $UDEV parent 1:140 handle 140: sfq perturb 10

# TOS Minimum Delay (ssh, NOT scp) in 1:110:

# iptables='/usr/local/sbin/iptables'
$iptables -t mangle -F

create_classify_chain() {
	name="classify_$1"
	class=$2
	iptables -t mangle -N $name
	iptables -t mangle -A $name -j CLASSIFY --set-class 1:$class
	iptables -t mangle -A $name -j ULOG --ulog-prefix "$name ($class)"
	iptables -t mangle -A $name -j ACCEPT
}

create_classify_chain local	11
create_classify_chain voip	110
create_classify_chain normal	120
create_classify_chain bulk	130
create_classify_chain unknown	140

mangle() {
	$iptables -t mangle -A POSTROUTING $1 -j classify_$2
	# $iptables -t mangle -A POSTROUTING $1 -j MARK --set-mark 0x$2
}

#$TC filter add dev $UDEV parent 1:0 protocol ip prio 10 u32 \
#      match ip tos 0x10 0xff  flowid 1:110

# voip
mangle "-o $UDEV -p udp -m length --length 0:250" voip
mangle "-o $UDEV -p tcp -m length --length 0:100" normal # 120 # acks

mangle "-o $UDEV -p tcp --dport 80" normal
mangle "-o $UDEV -p tcp --sport 80" normal
mangle "-o $UDEV -p tcp --dport 443" normal
mangle "-o $UDEV -p tcp --sport 3000" normal
mangle "-o $UDEV -p tcp --sport 4949" normal # munin-node
mangle "-o $UDEV -p tcp --dport 5666" normal # nrpe
mangle "-o $UDEV -p tcp --dport imaps" bulk
mangle "-o $UDEV -p tcp --dport imap" bulk
mangle "-o $UDEV -p tcp --dport smtp" bulk

mangle "-o $UDEV -m tos --tos 0x10" voip # interactive
mangle "-o $UDEV -m tos --tos 0x0 -p tcp --dport 48001" voip
mangle "-o $UDEV -m tos --tos 0x8 -p tcp --dport 48001" bulk
mangle "-o $UDEV -m tos --tos 0x0 -p tcp --sport 48001" normal
mangle "-o $UDEV -m tos --tos 0x0 -p tcp --sport 8080" normal
mangle "-o $UDEV -m tos --tos 0x0 -p tcp --dport 22" normal
mangle "-o $UDEV -p tcp --dport 5902" normal # vnc
mangle "-o $UDEV -p tcp --dport 5903" normal # vnc
mangle "-o $UDEV -p tcp --dport 3389" normal # rdp
mangle "-o $UDEV -p icmp" voip
mangle "-o $UDEV -d 72.21.192.0/19" bulk # backups to Amazon S3

for range in $EC2; do
	mangle "-o $UDEV -d $range -m comment --comment 'Dropbox/EC2'" bulk
done

mangle "-o $UDEV -m tos --tos 0x08" bulk

# default 1:140
mangle "-o $UDEV" unknown

filter() {
	# $iptables -A throttle -i $UDEV "$@"
	# $iptables -t mangle -A POSTROUTING $1 -j MARK --set-mark 0x$2
	true
}

filter -p tcp --sport 80 -j throttle_hi
filter -p tcp --sport 443 -j throttle_hi
filter -p tcp --sport 993 -j throttle_hi
filter -p tcp --sport 48001 -m tos --tos 0x10 -j throttle_hi
filter -p tcp --dport 48001 -m tos --tos 0x10 -j throttle_hi
filter -p tcp -j throttle_lo

#$TC filter add dev $UDEV parent 1:0 protocol ip prio 11 u32 \
#      match ip tos 0x08 0xff  flowid 1:30


# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
#$TC filter add dev $UDEV parent 1:0 protocol ip prio 10 u32 \
#        match ip protocol 1 0xff flowid 1:10

#mangle "-o $UDEV -p icmp" 10

# To speed up downloads while an upload is going on, put ACK packets in
# the interactive class:

#$TC filter add dev $UDEV parent 1: protocol ip prio 10 u32 \
#   match ip protocol 6 0xff \
#   match u8 0x05 0x0f at 0 \
#   match u16 0x0000 0xffc0 at 2 \
#   match u8 0x10 0xff at 33 \
#   flowid 1:10

# mangle "-o $UDEV -p tcp --tcp-flags SYN,PSH,ACK ACK" 10

#mangle "-o $UDEV -m length --length 0:200" 10
#mangle "-o $UDEV -m length --length 200:1600" 30
#mangle "-o $UDEV -p tcp --dport 48001" 20
# mangle "-o $UDEV -p icmp" 10

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20 by default

# some traffic however suffers a worse fate
#for port in $NOPRIOPORTDST
#do
#	#$TC filter add dev $UDEV parent 1: protocol ip prio 14 u32 \
#	#   match ip dport $port 0xffff flowid 1:30
#	mangle "-o $UDEV -p tcp --dport $port" 30
#	mangle "-o $UDEV -p udp --dport $port" 30
#done
#
#for port in $NOPRIOPORTSRC
#do
# 	#$TC filter add dev $UDEV parent 1: protocol ip prio 15 u32 \
#	#   match ip sport $a 0xffff flowid 1:30
#	mangle "-o $UDEV -p tcp --sport $port" 30
#	mangle "-o $UDEV -p udp --sport $port" 30
#done
#
#for host in $NOPRIOHOSTSRC
#do
# 	#$TC filter add dev $UDEV parent 1: protocol ip prio 16 u32 \
#	#   match ip src $a flowid 30
#	mangle "-o $UDEV -s $host" 30
#done
#
#for host in $NOPRIOHOSTDST
#do
# 	#$TC filter add dev $UDEV parent 1: protocol ip prio 17 u32 \
#	#   match ip dst $a flowid 30
#	mangle "-o $UDEV -d $host" 30
#done
#
## rest is 'non-interactive' ie 'bulk' and ends up in 1:20
#
##$TC filter add dev $UDEV parent 1: protocol ip prio 18 u32 \
#   match ip dst 0.0.0.0/0 flowid 1:20

#$iptables -t mangle -A POSTROUTING -p tcp -m mark --mark 0x10 \
#	-m limit --limit 1/s -j LOG

#$iptables -t mangle -A POSTROUTING -m mark --mark 0x10 \
#	-j TOS --set-tos 0x10

#$iptables -t mangle -A POSTROUTING -m mark --mark 0x20 \
#	-j TOS --set-tos 0x08

#$iptables -t mangle -A POSTROUTING -m mark --mark 0x30 \
#	-j TOS --set-tos 0x08

########## downlink to us #############

# slow downloads down to somewhat less than the real speed  to prevent 
# queuing at our ISP. Tune to see how high you can set it.
# ISPs tend to have *huge* queues to make sure big downloads are fast
#
# attach ingress policer:

$TC qdisc add dev $UDEV ingress handle ffff:

# filter *everything* to it (0.0.0.0/0), drop everything that's
# coming in too fast:

$TC filter add dev $UDEV parent ffff: protocol ip prio 50 u32 match ip src \
   0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1

###### downlink to computers behind us

if true; then

# install root HTB, point default traffic to 1:140 (unknown)

$TC qdisc add dev $DDEV root handle 1: htb default 140

# shape everything at $DOWNLINK2 speed - this prevents huge queues in your
# DSL modem which destroy latency:

$TC class add dev $DDEV parent 1: classid 1:1 htb rate 100mbit \
	ceil 100mbit burst 6k quantum 1500

$TC class add dev $DDEV parent 1:1 classid 1:10 htb rate ${DOWNLINK2}kbit \
	ceil ${DOWNLINK2}kbit burst 6k quantum 1500

$TC class add dev $DDEV parent 1:1 classid 1:11 htb rate 100mbit \
	ceil 100mbit burst 6k quantum 1500

# high prio class 1:110:

$TC class add dev $DDEV parent 1:10 classid 1:110 htb rate $[${DOWNLINK2}/4]kbit \
   ceil ${DOWNLINK2}kbit burst 6k prio 1 quantum 1500

# bulk & default class 1:120 - gets slightly less traffic, 
# and a lower priority:

$TC class add dev $DDEV parent 1:10 classid 1:120 htb \
	rate 8bps ceil ${DOWNLINK2}kbit burst 2k prio 2 quantum 1500

$TC class add dev $DDEV parent 1:10 classid 1:130 htb \
	rate 8bps ceil ${DOWNLINK2}kbit burst 2k prio 3 quantum 1500

$TC class add dev $DDEV parent 1:10 classid 1:140 htb \
	rate 8bps ceil $[${DOWNLINK}/2]kbit burst 2k prio 3 quantum 1500

# all get Stochastic Fairness:
$TC qdisc add dev $DDEV parent 1:110 handle 110: sfq perturb 10
$TC qdisc add dev $DDEV parent 1:120 handle 120: sfq perturb 10
$TC qdisc add dev $DDEV parent 1:130 handle 130: sfq perturb 10
$TC qdisc add dev $DDEV parent 1:140 handle 140: sfq perturb 10

# TOS Minimum Delay (ssh, NOT scp) in 1:110:

mangle "-o $DDEV -s 192.168.128.1" local # local
mangle "-o $DDEV -s 196.26.223.0/27" bulk -m comment --comment 'Akamai/Windows Updates'

for range in $EC2; do
	mangle "-o $DDEV -s $range -m comment --comment 'Dropbox/EC2'" bulk
done

mangle "-o $DDEV -m tos --tos 0x10" voip # interactive
mangle "-o $DDEV -m tos --tos 0x08" bulk

mangle "-o $DDEV -p tcp --sport 80" normal
mangle "-o $DDEV -p tcp --sport 443" normal
mangle "-o $DDEV -p tcp --sport 5903" normal # vnc
mangle "-o $DDEV -p tcp --sport imaps" bulk
mangle "-o $DDEV -p tcp --sport imap" bulk
mangle "-o $DDEV -p tcp --sport smtp" bulk
mangle "-o $DDEV -p udp -m length --length 0:100" voip
mangle "-o $DDEV -p tcp -m length --length 0:100" normal # TCP acks

# default is unknown (1:140)

mangle "-o $DDEV" bulk

# $TC filter add dev $DDEV parent 1:0 protocol ip prio 10 u32 \
#       match ip tos 0x10 0xff  flowid 1:10

# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
# $TC filter add dev $DDEV parent 1:0 protocol ip prio 10 u32 \
#         match ip protocol 1 0xff flowid 1:10

# To speed up downloads while an upload is going on, put ACK packets in
# the interactive class:

#$TC filter add dev $DDEV parent 1: protocol ip prio 10 u32 \
#   match ip protocol 6 0xff \
#   match u8 0x05 0x0f at 0 \
#   match u16 0x0000 0xffc0 at 2 \
#   match u8 0x10 0xff at 33 \
#   flowid 1:10

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

# some traffic however suffers a worse fate
#for a in $NOPRIOPORTDST
#do
#	$TC filter add dev $DDEV parent 1: protocol ip prio 14 u32 \
#	   match ip dport $a 0xffff flowid 1:30
#done
#
#for a in $NOPRIOPORTSRC
#do
# 	$TC filter add dev $DDEV parent 1: protocol ip prio 15 u32 \
#	   match ip sport $a 0xffff flowid 1:30
#done
#
#for a in $NOPRIOHOSTSRC
#do
# 	$TC filter add dev $DDEV parent 1: protocol ip prio 16 u32 \
#	   match ip src $a flowid 1:30
#done
#
#for a in $NOPRIOHOSTDST
#do
# 	$TC filter add dev $DDEV parent 1: protocol ip prio 17 u32 \
#	   match ip dst $a flowid 1:30
#done
#
## rest is 'non-interactive' ie 'bulk' and ends up in 1:20
#
#$TC filter add dev $DDEV parent 1: protocol ip prio 18 u32 \
#   match ip dst 0.0.0.0/0 flowid 1:20
#
fi

rm $LOCKFILE
